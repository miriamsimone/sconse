rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write canvas metadata
    match /canvas/{canvasId} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to read and write canvas shapes (for any canvas)
    match /canvas/{canvasId}/shapes/{document} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to read and write canvas connections (for any canvas)
    match /canvas/{canvasId}/connections/{connectionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // Allow authenticated users to read and write presence data
    match /presence/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Allow users to read and write their own profile data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;

      match /contacts/{contactId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Conversation metadata - accessible only to participants
    match /conversations/{conversationId} {
      function isParticipantFromResource() {
        return request.auth != null
            && resource.data != null
            && request.auth.uid in resource.data.participants;
      }

      function isParticipantFromRequest() {
        return request.auth != null
            && request.resource.data.keys().hasOnly([
              "type",
              "participants",
              "participantDisplayNames",
              "participantUsernames",
              "participantProfilePictureURLs",
              "displayName",
              "groupName",
              "groupAvatarURL",
              "createdBy",
              "createdAt",
              "updatedAt",
              "lastMessage",
              "lastMessageTimestamp",
              "lastMessageSenderId"
            ])
            && request.auth.uid in request.resource.data.participants;
      }

      function isParticipantAfterUpdate() {
        return request.auth != null
            && request.auth.uid in request.resource.data.participants;
      }

      allow read: if request.auth != null && (
        isParticipantFromResource() || 
        conversationId.matches('dm_.*' + request.auth.uid + '.*')
      );
      allow create: if isParticipantFromRequest();
      allow update: if isParticipantAfterUpdate();
      allow delete: if isParticipantFromResource();

      match /messages/{messageId} {
        function canAccessMessages() {
          return conversationId.matches('dm_.*' + request.auth.uid + '.*') ||
                 (exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                  request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants);
        }

        allow read: if request.auth != null && canAccessMessages();
        allow create: if request.auth != null 
            && request.auth.uid == request.resource.data.senderId
            && canAccessMessages();
        allow update, delete: if request.auth != null
            && request.auth.uid == resource.data.senderId;
      }

      match /typing/{userId} {
        function canAccessTyping() {
          return exists(/databases/$(database)/documents/conversations/$(conversationId)) &&
                 request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        }

        allow read: if request.auth != null && canAccessTyping();
        allow write: if request.auth != null && request.auth.uid == userId && canAccessTyping();
        allow delete: if request.auth != null && request.auth.uid == userId && canAccessTyping();
      }
    }

    // Allow authenticated users to read and write canvas comments
    match /canvasComments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
